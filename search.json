[




{
"title": "About the preCICE project",
"tags": "",
"keywords": "about, project leaders, timeline, impressum, legal",
"url": "about.html",
"summary": ""
}
,



{
"title": "Configure the CalculiX adapter",
"tags": "",
"keywords": "adapter, calculix, configuration, config.yml",
"url": "adapter-calculix-config.html",
"summary": "Write a config.yml, write a CalculiX case input file, and run an adapted CalculiX executable."
}
,



{
"title": "Get the CalculiX adapter",
"tags": "",
"keywords": "adapter, calculix, building",
"url": "adapter-calculix-get-adapter.html",
"summary": "How to build the adapted CalculiX `ccx_preCICE`"
}
,



{
"title": "Get CalculiX",
"tags": "",
"keywords": "adapter, calculix, building, spooles, arpack, yaml-cpp",
"url": "adapter-calculix-get-calculix.html",
"summary": "Building CalculiX itself can already be quite a challenges. That's why we collected here some recipe."
}
,



{
"title": "The CalculiX adapter",
"tags": "",
"keywords": "adapter, calculix",
"url": "adapter-calculix-overview.html",
"summary": "The CalculiX adapter can be used to couple CalculiX to CFD solvers for FSI or CHT application or even to couple CalculiX to itself."
}
,



{
"title": "Building the CalculiX adapter on SuperMUC",
"tags": "",
"keywords": "adapter, calculix, cluster, modules",
"url": "adapter-calculix-supermuc.html",
"summary": "This page explains how to build the CalculiX adapter on SuperMUC. Even though SuperMUC was shut down in 2019, this page may still be useful for other clusters."
}
,



{
"title": "Troubleshooting the CalculiX adapter",
"tags": "",
"keywords": "adapter, calculix, error",
"url": "adapter-calculix-troubleshooting.html",
"summary": "While working with the CalculiX adapter, you may run onto common issues. This is a collection of what we know could go wrong."
}
,



{
"title": "The code_aster adapter",
"tags": "",
"keywords": "CHT, pyprecice",
"url": "adapter-code_aster.html",
"summary": "On this page, we give a step-by-step guide how to get and install code_aster and the code_aster adapter. The adapter currently supports usage of code_aster as solid solver for conjugate heat transfer problems. We use the Python command files of code_aster and call the preCICE Python bindings from there."
}
,



{
"title": "Configure the deal.II codes",
"tags": "",
"keywords": "adapter, deal.II, configuration, parameter file",
"url": "adapter-dealii-configure.html",
"summary": "Define your geometry in the individual source code file and case specific parameters (e.g. coupling parameters) in the respective parameter file (*.prm)"
}
,



{
"title": "Coupling meshes in deal.II",
"tags": "",
"keywords": "adapter, dealii, meshes",
"url": "adapter-dealii-coupling-meshes.html",
"summary": "The polynomial support points are used to define the coupling mesh."
}
,



{
"title": "Get the deal.II adapter",
"tags": "",
"keywords": "adapter, dealii, building",
"url": "adapter-dealii-get.html",
"summary": "Use CMake to install deal.II and build the individual programs."
}
,



{
"title": "Limitations and assumptions",
"tags": "",
"keywords": "adapter, deal.II, limitations,",
"url": "adapter-dealii-limitations.html",
"summary": ""
}
,



{
"title": "The deal.II adapter",
"tags": "",
"keywords": "adapter, deal.II",
"url": "adapter-dealii-overview.html",
"summary": "Coupled structural solver written with the C++ finite element library deal.II"
}
,



{
"title": "Use the adapter for your own project",
"tags": "",
"keywords": "adapter, dealii, adapter writing",
"url": "adapter-dealii-own-project.html",
"summary": "This section will help you couple your own deal.II-code based on the provided deal.II solid codes."
}
,



{
"title": "Theoretic details of coupled deal.II codes",
"tags": "",
"keywords": "adapter, dealii, time discretization",
"url": "adapter-dealii-solver-details.html",
"summary": ""
}
,



{
"title": "The FEniCS adapter",
"tags": "",
"keywords": "adapter, fenics",
"url": "adapter-fenics.html",
"summary": "A general adapter for the open source computing platform FEniCS"
}
,



{
"title": "The Nutils adapter",
"tags": "",
"keywords": "FEM, adapter, heat conduction, finite element",
"url": "adapter-nutils.html",
"summary": "There is currently not really such a thing as a Nutils adapter. Coupling Nutils is so simple that directly calling the preCICE Python API from the application scripts is the way to go."
}
,



{
"title": "Overview of adapters",
"tags": "",
"keywords": "adapter, adapters, adapter overview, adapter introduction",
"url": "adapters-overview.html",
"summary": ""
}
,



{
"title": "Running simulations",
"tags": "",
"keywords": "adapter, su2, development, modules",
"url": "adapter-su2-configure.html",
"summary": "Modify SU2 configuration file, specify interfaces by SU2 markers, run SU2 either serial or parallel"
}
,



{
"title": "Build the adapter",
"tags": "",
"keywords": "adapter, su2, development, modules",
"url": "adapter-su2-get.html",
"summary": "Get SU2, get preCICE, execute adapter install script"
}
,



{
"title": "The SU2 adapter",
"tags": "",
"keywords": "adapter, su2, development, modules",
"url": "adapter-su2-overview.html",
"summary": "Modify native SU2 files to couple with other solvers or SU2 itself"
}
,



{
"title": "Community channels",
"tags": "",
"keywords": "contact, follow, social, stay in touch, news, videos, YouTube, Gitter, newsletter, newsfeed, mailing list, twitter",
"url": "community-channels.html",
"summary": ""
}
,



{
"title": "Contribute to preCICE",
"tags": "",
"keywords": "contribute, develop",
"url": "community-contribute-to-precice.html",
"summary": ""
}
,



{
"title": "Contributors",
"tags": "",
"keywords": "contributors, developers",
"url": "community-contributors.html",
"summary": ""
}
,



{
"title": "ECCOMAS WCCM 2020",
"tags": "",
"keywords": "2020, WCCM, ECCOMAS, event, events, minisymposium",
"url": "community-events-wccm-eccomas-2020.html",
"summary": ""
}
,



{
"title": "Community stories",
"tags": "",
"keywords": "",
"url": "community-projects.html",
"summary": ""
}
,



{
"title": "Become part of the preCICE community",
"tags": "",
"keywords": "",
"url": "community.html",
"summary": ""
}
,



{
"title": "Acceleration configuration",
"tags": "",
"keywords": "configuration, acceleration, under-relaxation, Aitken, Quasi-Newton",
"url": "configuration-acceleration.html",
"summary": "Mathematically, implicit coupling schemes lead to fixed-point equations at the coupling interface. A pure implicit coupling without acceleration corresponds to a simple fixed-point iteration, which still has the same stability issues as an explicit coupling. We need acceleration techniques to stabilize and accelerate the fixed-point iteration."
}
,



{
"title": "Action configurations",
"tags": "",
"keywords": "configuration, action, python, callback",
"url": "configuration-action.html",
"summary": "Sometimes, coupled solvers provide just not quite the data that you need to couple. For instance, a fluid solver provides stresses at the coupling boundary, whereas a solid solver requires forces. In this case, you can use so-called coupling actions to modify coupling data at runtime. These coupling actions are essentially a set of functionalities that have access to coupling meshes and the corresponding data values. On this page, we explain how you can use them."
}
,



{
"title": "Introduction to configuration",
"tags": "",
"keywords": "configuration, basics, xml, data",
"url": "configuration-introduction.html",
"summary": "The preCICE configuration file is structured in several sections. It is important to understand what the section are and how they are connected. On this page, we explain you that."
}
,



{
"title": "Communication configuration",
"tags": "",
"keywords": "configuration, communication, m2n tag, master tag",
"url": "configuration-communication.html",
"summary": "A very basic ingredient to coupling is communication. The participants you want to couple need to be able to communicate data. On this page, we explain how communication between participants can be configured."
}
,



{
"title": "Mesh exchange example",
"tags": "",
"keywords": "configuration, mesh exchange, example, read, write",
"url": "configuration-coupling-mesh-exchange.html",
"summary": "If you struggle with which mesh you should use where in the configuration and whether a mapping is read or write, you might find this example helpful."
}
,



{
"title": "Multi coupling configuration",
"tags": "",
"keywords": "configuration, coupling scheme",
"url": "configuration-coupling-multi.html",
"summary": "If you want to couple more than two participants, there are two options: You can combine multiple normal coupling schemes (composition) or you can use a fully-implicit multi-coupling scheme. On this page, we explain both options."
}
,



{
"title": "Coupling scheme configuration",
"tags": "",
"keywords": "configuration, coupling scheme, explicit, implicit, serial coupling, parallel coupling",
"url": "configuration-coupling.html",
"summary": "The coupling scheme is the centerpiece of the preCICE configuration. It describes the logical execution order of two or more participants. On this page, we explain how to couple two participants."
}
,



{
"title": "Exports configuration",
"tags": "",
"keywords": "configuration, export, vtk, paraview",
"url": "configuration-export.html",
"summary": "You can export your coupling meshes to vtk. This is a great feature for debugging. On this page, we explain how."
}
,



{
"title": "Logging configuration",
"tags": "",
"keywords": "configuration, logging, boost.log",
"url": "configuration-logging.html",
"summary": "By default, preCICE provides a meaningful logging output to stdout. In case you want to modify the default logging, this page describes how to do this."
}
,



{
"title": "Mapping configuration",
"tags": "",
"keywords": "configuration, mapping, meshes, coupling",
"url": "configuration-mapping.html",
"summary": "When coupling two participants at a common coupling interface, in general, the two surface meshes do not match. Therefore, preCICE provides data mapping methods to map coupling data from one mesh to the other. On this page, we explain how to configure such data mapping methods."
}
,



{
"title": "Configuration overview",
"tags": "",
"keywords": "configuration, xml, overview",
"url": "configuration-overview.html",
"summary": "preCICE needs to be configured at runtime via an `xml` file, typically named `precice-config.xml`. Here, you specify which solvers participate in the coupled simulation, which coupling data values they exchange, which numerical methods are used for the data mapping and the fixed-point acceleration and many other things. On this page, we give you an overview of the complete configuration section of the documentation."
}
,



{
"title": "Watch integral configuration",
"tags": "",
"keywords": "configuration, watchintegral",
"url": "configuration-watchintegral.html",
"summary": "With a watch integral, you can track the transient change of integral values of coupling data over complete coupling meshes. This is especially useful when you want to track conserved quantities of your simulation, such as flow rate or the overall force acting on a geometry."
}
,



{
"title": "Watchpoint configuration",
"tags": "",
"keywords": "configuration, watchpoint",
"url": "configuration-watchpoint.html",
"summary": "With a watch point, you can track the coupling data values at a certain position over time. This is very handy for applications such as the Turek and Hron FSI3 benchmark where you want to analyze the movement of the tip of a flexible plate."
}
,



{
"title": "XML reference",
"tags": "",
"keywords": "configuration, xml, reference",
"url": "configuration-xml-reference.html",
"summary": "On this page you find the complete configuration references of preCICE API."
}
,



{
"title": "Adapter software engineering",
"tags": "",
"keywords": "api, adapter, library, modularity, sustainability",
"url": "couple-your-code-adapter-software-engineering.html",
"summary": "The example developed in the step-by-step guide is a rather intrusive way of writing an adapter as we directly modify the main solver routines. This page discusses better software engineering approaches."
}
,



{
"title": "Application programming interface",
"tags": "",
"keywords": "api, adapter, library, bindings, SolverInterface",
"url": "couple-your-code-api.html",
"summary": "This page gives an overview on available preCICE APIs and minimal reference implementations."
}
,



{
"title": "Coupling flow",
"tags": "",
"keywords": "api, adapter, coupling schemes, communication, advance",
"url": "couple-your-code-coupling-flow.html",
"summary": "Do you wonder why there is no `sendData` and `receiveData` in preCICE? Instead, there is simply `advance`. We call this a high-level API. On this page, you learn which advantages a high-level API has and how communication and control flow in preCICE works."
}
,



{
"title": "Step 8 – Mesh connectivity",
"tags": "",
"keywords": "api, adapter, projection, mapping, edges, triangles",
"url": "couple-your-code-defining-mesh-connectivity.html",
"summary": "So far, our coupling mesh is only a cloud of vertices. This is sufficient for most of the numerical methods that preCICE offers. For some features, however, preCICE also needs to know how vertices are connected to each other. In this step, you learn how to define this so-called mesh connectivity."
}
,



{
"title": "Direct access to received meshes",
"tags": "",
"keywords": "api, adapter, mapping, meshes",
"url": "couple-your-code-direct-access.html",
"summary": "You can access received meshes and their data directly by using specific optional API functions."
}
,



{
"title": "Dealing with distributed meshes",
"tags": "",
"keywords": "api, adapter, meshes, parallelization, mapping",
"url": "couple-your-code-distributed-meshes.html",
"summary": "As preCICE is designed for HPC, adapter developers often have to deal with distributed meshes. There is no golden bullet how to best handle distributed meshes with preCICE. On this page, we compare different approaches."
}
,



{
"title": "Initialization in existing MPI environment",
"tags": "",
"keywords": "api, adapter, parallelization, mpi, initialization",
"url": "couple-your-code-existing-mpi-environment.html",
"summary": "preCICE uses MPI for communication between different participants (and also for communication between ranks of the same participant). So are there any problems if the solver that you intend to couple also already uses MPI (e.g. for parallelization)? Who should initialize MPI? Who should finalize MPI? This is what we discuss here."
}
,



{
"title": "Dealing with FEM meshes",
"tags": "",
"keywords": "api, adapter, FEM, meshes, elements",
"url": "couple-your-code-fem-meshes.html",
"summary": "TODO"
}
,



{
"title": "Step 6 – Implicit coupling",
"tags": "",
"keywords": "api, adapter, coupling schemes, checkpoint, fixed-point",
"url": "couple-your-code-implicit-coupling.html",
"summary": "In previous steps, we only considered explicit coupling. We now move onto implicit coupling, so sub-iterating each timestep multiple times until a convergence threshold is reached. This stabilzes strongly-coupled problems."
}
,



{
"title": "Step 7 - Data initialization",
"tags": "",
"keywords": "api, adapter, initialization, coupling scheme, restart",
"url": "couple-your-code-initializing-coupling-data.html",
"summary": "As default values, preCICE assumes that all coupling variables are zero initially. For fluid-structure interaction, for example, this means that the structure is in its reference state. Sometimes, you want to change this behavior – for instance, you may want to restart your simulation."
}
,



{
"title": "Step 3 – Mesh and data access",
"tags": "",
"keywords": "api, adapter, mesh, ids, data, vertices",
"url": "couple-your-code-mesh-and-data-access.html",
"summary": "In this step, we see how to define coupling meshes and access coupling data."
}
,



{
"title": "Dealing with moving meshes",
"tags": "",
"keywords": "api, adapter, ALE, geometries, CFD",
"url": "couple-your-code-moving-meshes.html",
"summary": "TODO"
}
,



{
"title": "Couple your code",
"tags": "",
"keywords": "api, adapter, peer-to-peer, library, bindings",
"url": "couple-your-code-overview.html",
"summary": ""
}
,



{
"title": "Porting adapters from preCICE 1.x to 2.x",
"tags": "",
"keywords": "api, adapter, version, timestep, action",
"url": "couple-your-code-porting-adapters.html",
"summary": "This guide helps you to upgrade from preCICE 1.x to preCICE 2.x."
}
,



{
"title": "Step 1 – Preparation",
"tags": "",
"keywords": "api, adapter, library, software engineering, CFD, fluid",
"url": "couple-your-code-preparing-your-solver.html",
"summary": "If you want to couple your own code you need to properly understand it. That is why, in this first step, we have a look at your own code. We discuss what you need to do to prepare the code for coupling."
}
,



{
"title": "Step 2 – Steering methods",
"tags": "",
"keywords": "api, adapter, initialization, advance, finalize, workflow",
"url": "couple-your-code-steering-methods.html",
"summary": "In this step, you get to know the most important API functions of preCICE: initialize, advance, and finalize."
}
,



{
"title": "Step 5 – Non-matching timestep sizes",
"tags": "",
"keywords": "api, adapter, advance, timestepping, subcycling, adaptivity",
"url": "couple-your-code-timestep-sizes.html",
"summary": "In this step, you learn how preCICE handles non-matching timestep sizes and a few more things about simulation time."
}
,



{
"title": "General coding conventions",
"tags": "",
"keywords": "pages, development",
"url": "dev-docs-dev-conventions.html",
"summary": "This page describes general and coding conventions used in preCICE."
}
,



{
"title": "Timings in preCICE",
"tags": "",
"keywords": "pages, development",
"url": "dev-docs-dev-eventtimings.html",
"summary": ""
}
,



{
"title": "Logging",
"tags": "",
"keywords": "pages, development",
"url": "dev-docs-dev-logging.html",
"summary": ""
}
,



{
"title": "Optimization",
"tags": "",
"keywords": "pages, development",
"url": "dev-docs-dev-optimization.html",
"summary": ""
}
,



{
"title": "Developer documentation",
"tags": "",
"keywords": "pages, development",
"url": "dev-docs-overview.html",
"summary": ""
}
,



{
"title": "Release workflow",
"tags": "",
"keywords": "pages, development",
"url": "dev-docs-dev-release.html",
"summary": ""
}
,



{
"title": "Running and writing tests",
"tags": "",
"keywords": "pages, development, tests",
"url": "dev-docs-dev-testing.html",
"summary": ""
}
,



{
"title": "Tooling",
"tags": "",
"keywords": "pages, development",
"url": "dev-docs-dev-tooling.html",
"summary": ""
}
,



{
"title": "Documentation cheatsheet",
"tags": "",
"keywords": "pages, migration, cheatsheet",
"url": "docs-meta-cheatsheet.html",
"summary": ""
}
,



{
"title": "Landing page layout",
"tags": "",
"keywords": "landing page",
"url": "docs-meta-landing-page.html",
"summary": ""
}
,



{
"title": "Documentation migration guide",
"tags": "",
"keywords": "pages, migration, github wiki",
"url": "docs-meta-migration-guide.html",
"summary": "We describe a typical migration workflow for documentation pages from the (old) preCICE Github Wiki to the current jekyll-based system."
}
,



{
"title": "Documentation of the documentation",
"tags": "",
"keywords": "pages, authoring, exclusion, frontmatter",
"url": "docs-meta-overview.html",
"summary": "This page is an introduction to the development of the preCICE documentation, based on a jekyll theme called documentation-theme-jekyll. You will learn how to run jekyll locally, about the sidebar structure, how to name and where to save documentation pages and what a minimal frontmatter looks like."
}
,



{
"title": "ECCOMAS Coupled Problems 2021",
"tags": "",
"keywords": "2021, ECCOMAS, COUPLED, event, events, minisymposium",
"url": "eccomas-coupled-2021.html",
"summary": ""
}
,



{
"title": "FAQ",
"tags": "",
"keywords": "",
"url": "faqindex.html",
"summary": ""
}
,





{
"title": "Literature guide",
"tags": "",
"keywords": "literature, papers, numerics, hpc",
"url": "fundamentals-literature-guide.html",
"summary": "A guide to the main reference literature for each component and feature of preCICE"
}
,



{
"title": "Output files",
"tags": "",
"keywords": "output, log, iterations, convergence, events",
"url": "fundamentals-output-files.html",
"summary": "During runtime, preCICE writes different output files. On this page, we give an overview of these files and their content."
}
,



{
"title": "The preCICE documentation",
"tags": "",
"keywords": "overview, features, docs",
"url": "docs.html",
"summary": "This page gives an overview of the complete preCICE documentation, including building, configuration, literature, the API, and many more."
}
,



{
"title": "Roadmap",
"tags": "",
"keywords": "upcoming features, roadmap",
"url": "fundamentals-roadmap.html",
"summary": "We are actively developing preCICE. These are some of the features you can expect in the future."
}
,



{
"title": "Terminology",
"tags": "",
"keywords": "adapter, peer-to-peer, library, black-box, participant",
"url": "fundamentals-terminology.html",
"summary": "We often refer to the following terms, but they may not already be clear."
}
,



{
"title": "preCICE - The Coupling Library",
"tags": "",
"keywords": "",
"url": "index.html",
"summary": ""
}
,



{
"title": "Fortran bindings",
"tags": "",
"keywords": "todo, basics, overview, installation, bindings, fortran",
"url": "installation-bindings-fortran.html",
"summary": ""
}
,



{
"title": "Matlab bindings",
"tags": "",
"keywords": "todo, basics, overview, installation, bindings, matlab",
"url": "installation-bindings-matlab.html",
"summary": "Clone the repository precice/matlab-bindings and run the installation script with Matlab"
}
,



{
"title": "Python bindings",
"tags": "",
"keywords": "todo, configuration, basics, overview, installation, bindings",
"url": "installation-bindings-python.html",
"summary": "Use pip3 install --user pyprecice to install the python language bindings from PyPI"
}
,



{
"title": "The preCICE distribution",
"tags": "",
"keywords": "installation, versions, compatibility, distribution",
"url": "installation-distribution.html",
"summary": "A frozen state of component versions that work together."
}
,



{
"title": "Linking to preCICE",
"tags": "",
"keywords": "configuration, basics, cmake, installation, building, source, autotools, make, pkg-config",
"url": "installation-linking.html",
"summary": ""
}
,



{
"title": "Installing preCICE",
"tags": "",
"keywords": "configuration, basics, overview, installation",
"url": "installation-overview.html",
"summary": "You always need to install the preCICE library and you have a few ways to do this: using a binary package, building from source manually, or building using Spack. You may additionally need to install bindings for Python, Fortran, or Matlab separately."
}
,



{
"title": "System packages",
"tags": "",
"keywords": "configuration, basics, installation, building, dependencies, spack",
"url": "installation-packages.html",
"summary": ""
}
,



{
"title": "Building from source - Advanced",
"tags": "",
"keywords": "configuration, basics, cmake, installation, building, source",
"url": "installation-source-advanced.html",
"summary": ""
}
,



{
"title": "Building from source - Building",
"tags": "",
"keywords": "configuration, basics, cmake, installation, building, source",
"url": "installation-source-building.html",
"summary": ""
}
,



{
"title": "Notes on CMake",
"tags": "",
"keywords": "configuration, basics, cmake, installation, building, source",
"url": "installation-source-cmake.html",
"summary": ""
}
,



{
"title": "Building from source - Configuration",
"tags": "",
"keywords": "configuration, basics, cmake, installation, building, source",
"url": "installation-source-configuration.html",
"summary": ""
}
,



{
"title": "Building from source - Dependencies",
"tags": "",
"keywords": "configuration, basics, installation, building",
"url": "installation-source-dependencies.html",
"summary": "This page describes the dependencies used by preCICE, how to install them on various systems and how to build them."
}
,



{
"title": "Building from source - Installation",
"tags": "",
"keywords": "configuration, basics, cmake, installation, building, source",
"url": "installation-source-installation.html",
"summary": ""
}
,



{
"title": "Building from source - Preparation",
"tags": "",
"keywords": "configuration, basics, cmake, installation, building, source",
"url": "installation-source-preparation.html",
"summary": ""
}
,



{
"title": "Building from source - Testing",
"tags": "",
"keywords": "configuration, basics, cmake, installation, building, source",
"url": "installation-source-testing.html",
"summary": ""
}
,



{
"title": "Building from source - Troubleshooting",
"tags": "",
"keywords": "configuration, basics, cmake, installation, building, source",
"url": "installation-source-troubleshooting.html",
"summary": ""
}
,



{
"title": "Using Spack",
"tags": "",
"keywords": "configuration, basics, installation, building, dependencies, spack",
"url": "installation-spack.html",
"summary": "Get and use Spack to easily build preCICE and all its dependencies from source on your Linux/macOS laptop or local supercomputer, without any root access."
}
,



{
"title": "Special systems",
"tags": "",
"keywords": "installation, building, dependencies, spack, cluster, supercomputer",
"url": "installation-special-systems.html",
"summary": ""
}
,



{
"title": "Demo Virtual Machine",
"tags": "",
"keywords": "installation, demo, sandbox, virtual machine, vm, vagrant, box",
"url": "installation-vm.html",
"summary": "A sandbox to try preCICE and all the adapters without having to install them on your system."
}
,



{
"title": "preCICE workshop 2020",
"tags": "",
"keywords": "precice workshop 2021, event, events, workshop",
"url": "precice-workshop-2020.html",
"summary": ""
}
,



{
"title": "preCICE workshop 2021",
"tags": "",
"keywords": "precice workshop 2021, event, events, workshop",
"url": "precice-workshop-2021.html",
"summary": ""
}
,



{
"title": "Privacy policy",
"tags": "",
"keywords": "privacy, policy, privacy policy, data protection, data retention, personal data",
"url": "privacy.html",
"summary": ""
}
,



{
"title": "Publications",
"tags": "",
"keywords": "cite, publications",
"url": "publications.html",
"summary": ""
}
,



{
"title": "Release strategy",
"tags": "",
"keywords": "pages, authoring, release, hotfix, development",
"url": "dev-docs-release-strategy.html",
"summary": ""
}
,







{
"title": "Config visualization",
"tags": "",
"keywords": "tooling, xml, configuration",
"url": "tooling-config-visualization.html",
"summary": "Understanding, handling and debugging preCICE configuration files can be difficult and tedious. This tool simplifies this process by visualizing the configuration as a dot graph."
}
,



{
"title": "Tools for preCICE",
"tags": "",
"keywords": "tools",
"url": "tooling-overview.html",
"summary": ""
}
,



{
"title": "Performance analysis",
"tags": "",
"keywords": "tooling, json, performance, events, analysis",
"url": "tooling-performance-analysis.html",
"summary": "A guide to the main reference literature for each component and feature of preCICE"
}
,



{
"title": "RBF shape calculator",
"tags": "",
"keywords": "tooling, rbf, configuration",
"url": "tooling-rbf-shape.html",
"summary": ""
}
,





{
"title": "A handful of exciting tutorials",
"tags": "",
"keywords": "tutorials, examples, cases",
"url": "tutorials.html",
"summary": "A handful of ready-to-run cases for you to build upon."
}
,



{
"title": "Quickstart",
"tags": "",
"keywords": "tutorial, quickstart",
"url": "quickstart.html",
"summary": "Install preCICE on Linux (e.g. via a Debian package) and couple an OpenFOAM fluid solver (using the OpenFOAM-preCICE adapter) with an example rigid body solver in C++."
}
,



{
"title": "1D Elastic Tube",
"tags": "",
"keywords": "OpenFOAM, python",
"url": "tutorials-elastic-tube-1d.html",
"summary": "The 1D Elastic Tube is a FSI case, that consists of an internal flow in a flexible tube. The flow is unsteady and incompressible. This tutorial contains C++ and Python variants of the fluid and solid solvers. Running the simulation takes just 1-2 minutes."
}
,



{
"title": "Elastic tube 3D",
"tags": "",
"keywords": "FSI, OpenFOAM, CalculiX, nearest-projection, IMVJ",
"url": "tutorials-elastic-tube-3d.html",
"summary": "Tutorial for an FSI simulation of a three-dimensional expanding tube scenario"
}
,



{
"title": "Flow over heated plate",
"tags": "",
"keywords": "tutorial, CHT, conjugate-heat transfer, OpenFOAM, FEniCS, Nutils",
"url": "tutorials-flow-over-heated-plate.html",
"summary": "This tutorial describes how to run a conjugate heat transfer coupled simulation using preCICE and any fluid-solid solver combination of our <a href="adapters-overview.html">officially provided adapter codes</a>."
}
,



{
"title": "Flow over heated plate steady state",
"tags": "",
"keywords": "CHT, steady-state, Code_Aster, OpenFOAM",
"url": "tutorials-flow-over-heated-plate-steady-state.html",
"summary": "Using a steady-state OpenFOAM solver for a CHT coupling with code_aster. This tutorial is based on the "flow over a heated plate" scenario."
}
,



{
"title": "Flow over heated plate nearest projection",
"tags": "",
"keywords": "OpenFOAM, nearest-projection, CHT",
"url": "tutorials-flow-over-heated-plate-nearest-projection.html",
"summary": "This tutorial introduces an example simulation setup for a nearest-projection mapping, based on the "flow over a heated plate" scenario."
}
,



{
"title": "Heat exchanger",
"tags": "",
"keywords": "CHT, OpenFOAM, CalculiX",
"url": "tutorials-heat-exchanger.html",
"summary": "Tutorial for a shell-and-tube heat exchanger, using OpenFOAM and CalculiX"
}
,



{
"title": "Muliple perpendicular flaps",
"tags": "",
"keywords": "multi-coupling, OpenFOAM, deal.II, FSI",
"url": "tutorials-multiple-perpendicular-flaps.html",
"summary": "In this case, a fluid and two solids are coupled together using a fully-implicit multi-coupling scheme."
}
,



{
"title": "Partitioned elastic beam",
"tags": "",
"keywords": "Structure-Structure Coupling, CalculiX, solid mechanics",
"url": "tutorials-partitioned-elastic-beam.html",
"summary": "This tutorial describes how to run a structure-structure interaction simulation with CalculiX running on both sides."
}
,



{
"title": "Partitioned heat conduction",
"tags": "",
"keywords": "FEniCS, Nutils, Heat conduction",
"url": "tutorials-partitioned-heat-conduction.html",
"summary": "We solve a simple heat equation. The domain is partitioned and the coupling is established in a Dirichlet-Neumann fashion."
}
,



{
"title": "Partitioned heat conduction (complex setup)",
"tags": "",
"keywords": "FEniCS, Heat conduction",
"url": "tutorials-partitioned-heat-conduction-complex.html",
"summary": "This tutorial is the advanced version of the "partitioned heat conduction" tutorial, showcasing more advanced features and geometries."
}
,



{
"title": "Perpendicular flap",
"tags": "",
"keywords": "fluid-structure interaction, FSI, OpenFOAM, FEniCS, Nutils, deal.II, Calculix, SU2,",
"url": "tutorials-perpendicular-flap.html",
"summary": "This tutorial describes how to run a fluid-structure interaction using preCICE and any fluid-solid solver combination of our <a href="adapters-overview.html">officially provided adapter codes</a>."
}
,



{
"title": "Turek Hron FSI3",
"tags": "",
"keywords": "OpenFOAM, deal.II, verification",
"url": "tutorials-turek-hron-fsi3.html",
"summary": "The Turek-Hron FSI cases are well-established numerical benchmarks and, therefore, well suited for verification of preCICE itself and the used adapters. In this tutorial, we focus on the FSI3 case, which presents the most challenging case in terms of added mass. Please note that the meshes of this case are significantly finer than for other tutorials. Running the simulation might take a few hours. We do not recommend to run this tutorials as your first preCICE tutorial."
}
,



{
"title": "Partitioned pipe flow",
"tags": "",
"keywords": "tutorial, FF, fluid-fluid coupling, OpenFOAM, pimpleFoam, sonicLiquidFoam",
"url": "tutorials-partitioned-pipe.html",
"summary": "This tutorial describes how to run a partitioned fluid simulation using preCICE."
}
,



{
"title": "Extend the OpenFOAM adapter",
"tags": "",
"keywords": "adapter, openfoam, development, modules",
"url": "adapter-openfoam-extend.html",
"summary": "An overview of the OpenFOAM adapter's architecture and which parts to modify if you want to add functionality."
}
,



{
"title": "Configure the OpenFOAM adapter",
"tags": "",
"keywords": "adapter, openfoam, configuration, preciceDict, controlDict",
"url": "adapter-openfoam-config.html",
"summary": "Write a system/preciceDict, set compatible boundary conditions, and activate the adapter in your system/controlDict."
}
,



{
"title": "OpenFOAM support",
"tags": "",
"keywords": "adapter, openfoam, support, versions",
"url": "adapter-openfoam-support.html",
"summary": "Recent OpenFOAM.com versions work out-of-the-box. Recent OpenFOAM.org versions are also supported, but you will need a version-specific branch."
}
,



{
"title": "Get the OpenFOAM adapter",
"tags": "",
"keywords": "adapter, openfoam, building",
"url": "adapter-openfoam-get.html",
"summary": "Get the code from GitHub and run ./Allwmake. If this fails, look into wmake.log and ldd.log."
}
,



{
"title": "The OpenFOAM adapter",
"tags": "",
"keywords": "adapter, openfoam, cite, versions",
"url": "adapter-openfoam-overview.html",
"summary": "An OpenFOAM function object for CHT, FSI, and fluid-fluid coupled simulations using preCICE."
}
,



{
"title": "",
"tags": "",
"keywords": "",
"url": "about",
"summary": ""
}
,



{
"title": "",
"tags": "",
"keywords": "",
"url": "timeline",
"summary": ""
}
,



{
"title": "",
"tags": "",
"keywords": "",
"url": "codes",
"summary": ""
}
,



{
"title": "",
"tags": "",
"keywords": "",
"url": "resources",
"summary": ""
}
,



{
"title": "",
"tags": "",
"keywords": "",
"url": "testimonials",
"summary": ""
}
,



{
"title": "",
"tags": "",
"keywords": "",
"url": "features",
"summary": ""
}
,



{
"title": "",
"tags": "",
"keywords": "",
"url": "preCICE2020",
"summary": ""
}
,



{
"title": "",
"tags": "",
"keywords": "",
"url": "preCICE2021",
"summary": ""
}
,



{
"title": "",
"tags": "",
"keywords": "",
"url": "publications",
"summary": ""
}
,



{
"title": "",
"tags": "",
"keywords": "",
"url": "redirects.json",
"summary": ""
}
,



{
"title": "",
"tags": "",
"keywords": "",
"url": "robots.txt",
"summary": ""
}






]
